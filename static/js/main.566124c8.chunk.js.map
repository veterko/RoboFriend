{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","cardComponent","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","error","info","Component","App","onSearchChange","event","setState","searchField","target","value","filteredRobots","filter","robot","toLowerCase","includes","fetch","then","response","json","users","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mMAeeA,G,KAZF,SAACC,GACV,OACI,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,WCOXC,EAZE,SAAC,GAAc,IACtBC,EADqB,EAAZC,OACcC,KAAI,SAACC,EAAMC,GACpC,OACA,kBAAC,EAAD,CACKC,IAAKD,EAAGR,GAAIO,EAAKP,GAAIC,KAAMM,EAAKN,KAAMC,MAAOK,EAAKL,WAG3D,OACE,6BAAME,ICEGM,EAXG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKd,UAAU,OACX,2BAAOA,UAAU,mCAAmCe,KAAK,SAASC,YAAY,gBAC1EC,SAAUH,MCGXI,EARD,SAACnB,GACX,OACI,yBAAKoB,MAAO,CAACC,UAAU,SAAUC,OAAO,kBAAmBC,OAAO,UAC7DvB,EAAMwB,WCkBJC,G,wBAnBX,WAAYzB,GAAO,IAAD,8BACd,4CAAMA,KACD0B,MAAQ,CACTC,UAAU,GAHA,E,sEAQd,OAAGC,KAAKF,MAAMC,SACN,qCAEDC,KAAK5B,MAAMwB,W,wCAGJK,EAAOC,GACrBF,KAAKF,MAAMC,UAAW,M,GAhBFI,cC4CbC,E,YApCX,aACC,IAAD,8BACI,+CAQJC,eAAgB,SAACC,GAEb,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SATzC,EAAKZ,MACL,CACIjB,OAAS,GACT2B,YAAa,IALrB,E,sEAcS,IAAD,SAC0BR,KAAKF,MAA5BjB,EADH,EACGA,OACD8B,GAFF,EACWH,YACQ3B,EAAO+B,QAAO,SAAAC,GAAU,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAS,EAAKjB,MAAMU,YAAYM,mBAC/G,OACI,yBAAKzC,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWc,aAAca,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQ8B,S,0CAOlB,IAAD,OACfK,MAAM,6CAA6CC,MAAM,SAAAC,GAAQ,OAAGA,EAASC,UAAQF,MAAK,SAAAG,GAAK,OAAE,EAAKb,SAAS,CAAE1B,OAAQuC,W,GAlC/GC,IAAMlB,WCGJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMhB,MAAK,SAAAiB,GACjCA,EAAaC,iB","file":"static/js/main.566124c8.chunk.js","sourcesContent":["import React from 'react';\r\nimport 'tachyons'\r\n\r\nconst Card = (props) => {\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'> \r\n            <img alt='Robots' src={`https://robohash.org/${props.id}?200x200`}/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card'\r\nimport 'tachyons'\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardComponent = robots.map((user, i)=>{\r\n        return (\r\n        <Card \r\n             key={i} id={user.id} name={user.name} email={user.email} >\r\n        </Card>)\r\n    })\r\n    return(\r\n      <div>{cardComponent}</div>\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport 'tachyons';\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search robots'\r\n                onChange={searchChange}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll =(props)=> {\r\n    return (\r\n        <div style={{overflowY:'scroll', border:'5px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport { render } from '@testing-library/react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError)\r\n        return (<h1>Oups!</h1>)\r\n        else\r\n        return this.props.children;\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.state.hasError = true;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport 'tachyons';\r\nimport CardList from './CardList';\r\nimport {robots} from './robots';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll'\r\nimport './App.css'\r\nimport ErrorBoundary from './ErrorBoundary';\r\n\r\nclass App extends React.Component \r\n{\r\n    constructor()\r\n    {\r\n        super();        \r\n        this.state = \r\n        {\r\n            robots : [],\r\n            searchField: ''\r\n        }\r\n    }\r\n\r\n    onSearchChange =(event)=>\r\n    {\r\n        this.setState({searchField: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        const {robots, searchField} = this.state;\r\n        const filteredRobots = robots.filter(robot => {return robot.name.toLowerCase().includes(this.state.searchField.toLowerCase())});\r\n        return(\r\n            <div className='tc'>\r\n                <h1 className='f1'>RoboFriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange} />\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch('http://jsonplaceholder.typicode.com/users').then( response =>response.json()).then(users=>this.setState({ robots: users}));\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}